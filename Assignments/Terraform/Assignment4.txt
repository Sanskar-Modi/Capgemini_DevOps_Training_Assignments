Create Ghost module
Create a directory called ghost.
Your modules will be made up of three files: main.tf, variables.tf and outputs.tf.

main.tf
In main.tf you will deploy out two resources docker_image and docker_container. The docker_image resource name will be ghost_image.
The name will use th image_name variable.
The docker_container resource name will be ghost_container.
The name will be set using a varialbe called container_name. The image will be set usingdocker_image.ghost_image.latest. Set the external port to use the ext_port variable.

variables.tf
In variables.tf create three varialbes: image_name, container_name and ext_port.

outputs.tf
In outputs.tf create two outputs: ip and container_name. The ip output the ghost_container's ip_address attribute.
The container_name output the ghost_container's name attribute.

Create root module
main.tf
In cloud_user directory create main.tf, variables.tf and outputs.tf. In main.tf will use the ghost module.
Set image_name using a variable called image_name.
Set container_name using a variable called container_name.
Set ext_port using a variable called ext_port.
In variables.tf create three image_name, container_name and ext_port.

variables.tf
The image_name will have a default value of ghost:latest with a description of Image for container.
The container_name will have a default value of blogwith a description ofName of the container.  
Theext_portwill have adefaultvalue of 80 with a description of External port for container.

outputs.tf
In outputs.tf create two outputs: ip and container_name. The ip output the ghost_container's ip_address attribute.
The container_name output the ghost_container's name attribute.

Deploy the infrastructure
Initialize Terraform.
Generate a Terraform plan and output a plan file.
Deploy the infrastructure using the plan file.



--

Create a directory module

Command: mkdir module

Under module create a ghost directory 

Command : mkdir ghost

Now move to the ghost directory 

Command : cd ghost

Now create the variable.tf file 

Command : vi variable.tf

variable "image_name" {
  default = "ghost"
}

variable "container_name" {
  default = "ghost_container"
}

variable "ext_port" {
  default = "80"
}

Now create the main.tf file 

Command : vi main.tf

resource "docker_image" "image_id" {
  name = "${var.image_name}"
}

resource "docker_container" "container_id" {
  name  = "${var.container_name}"
  image = "${docker_image.image_id.latest}"

  #image = "${docker_image.ghost_image.latest}"

  ports {
    internal = 2368
    external = "${var.ext_port}"
  }
}

Now create the output.tf file

Command : vi output.tf

output "ip_address" {
  value       = "${docker_container.container_id.ip_address}"
  description = "The IP for the container."
}

output "container_name" {
  value       = "${docker_container.container_id.name}"
  description = "The name of the container."
}


Now in cloud user directory create the root module 

Command : mkdir root 

Now move inside the root module directory 

Command : cd root 

Now create the varaible.tf file 

Command : vi varaible.tf 

variable "image_name" {
  description = "Name of the image"
  default     = "ghost:latest"
}

variable "ext_port" {
  default = "80"
}

variable "container_name" {
  description = "Name of the container"
  default     = "blog"
}


Now create the main.tf file along with provider information 

Command : vi main.tf

provider "docker" {
  host = "tcp://192.168.207.131:4243"
}

module "ghost_module" {
  source         = "/home/sanskar/terraform/a4/modules/ghost"
  image_name     = "ghost:latest"
  container_name = "blog"
  ext_port       = "85"
}

Now create the output.tf and map it with modules output.tf file

Command : vi output.tf

output "ip_address" {
  value       = "${module.ghost_module.ip_address}"
  description = "The IP for the container."
}

output "container_name" {
  value       = "${module.ghost_module.container_name}"
  description = "The name of the container."
}


Now initialize terraform 

Command : terraform init 

Now plan out the tf resource

Command : terraform plan -out tf_plan 

Now deploy the plan 

Command : terraform apply tf_plan 